package controller;

import com.google.inject.Guice;
import com.google.inject.Inject;
import com.google.inject.Injector;
import com.jfoenix.controls.JFXTextField;
import config.AppModule;
import dto.Book;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.stage.Stage;
import service.ServiceFactory;
import service.custom.BookService;
import service.custom.impl.BookServiceImpl;
import alert.Alert;
import alert.AlertType;
import util.ServiceType;

import java.io.IOException;
import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;

public class AddBookFormController implements Initializable {
    public JFXTextField txtTile;
    public JFXTextField txtCopies;
    public TableColumn colIsbn;
    public TableColumn colTitle;
    public TableColumn colAuthor;
    public TableColumn colCategory;
    public TableColumn colCopies;
    public TableColumn colStatus;
    public TableView bookTable;
    public Label txtIdLbl;
    public ComboBox comboCategory;
    public ComboBox comboStatus;
    public ComboBox comboAuthor;

    //    BookServiceImpl service = ServiceFactory.getInstance().getServiceType(ServiceType.BOOK);
    @Inject
    BookService service;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        setAutogenarateBookId();
        loadAllComboBoxData();
        loadBookTable();
    }

    // Load all combo box data from the service
    private void loadAllComboBoxData() {
        //        service.GetBookGerneMap() <-- book gerne map reference
        comboCategory.getItems().addAll(service.getBookGerneMap().keySet());
        //        service.GetBookGerneMap() <-- book author map reference
        comboAuthor.getItems().addAll(service.getAuthorMap().keySet());
        //        service.GetBookGerneMap() <-- book status map reference
        comboStatus.getItems().addAll(service.getStatusMap().keySet());
    }

    // Set autogenerated book ID when the form is initialized
    private void setAutogenarateBookId() {
        txtIdLbl.setText(service.bookId());
    }

    // Add book button action handler
    public void addBookOnActionBtn(ActionEvent actionEvent) {

        // Validate input fields
        if (txtTile.getText().isEmpty()) {
            Alert.trigger(AlertType.WARNING, "Enter book title!");
            return;
        } else if (txtCopies.getText().isEmpty()) {
            Alert.trigger(AlertType.WARNING, "Enter book copies count !");
            return;
        } else if (comboCategory.getValue() == null) {
            Alert.trigger(AlertType.WARNING, "Select a book category !");
            return;
        } else if (comboStatus.getValue() == null) {
            Alert.trigger(AlertType.WARNING, "Select a book status !");
            return;
        } else if (comboAuthor.getValue() == null) {
            Alert.trigger(AlertType.WARNING, "Select a book author !");
            return;
        } else {

            // Check if the number of copies is valid
            if (checkIsNumber(txtCopies.getText())) {

                // Get the selected values from the combo boxes and map them to their IDs
                String statusId = service.getStatusMap().get(comboStatus.getValue());
                String gerneId = service.getBookGerneMap().get(comboCategory.getValue());
                String authorId = service.getAuthorMap().get(comboAuthor.getValue());

                Book book = new Book(
                        txtIdLbl.getText(),
                        txtTile.getText(),
                        Integer.parseInt(txtCopies.getText()),
                        statusId,
                        gerneId,
                        authorId);

                // Call the service to add the book
                Boolean isAdded = service.addBook(book);
                if (isAdded) {
                    // Book added successfully
                    Alert.trigger(AlertType.INFORMATION, "Book Added Successfully  !");
                    clearField();
                    setAutogenarateBookId();
                    loadBookTable();
                } else {
                    // Failed to add book
                    Alert.trigger(AlertType.ERROR, "Book doessn't Added ..");
                    clearField();
                }
            } else {
                Alert.trigger(AlertType.WARNING, "Invalid Book copies count...");
            }
        }
    }

    // Clear all input fields after adding a book or on demand
    private void clearField() {
        txtTile.setText("");
        txtCopies.setText("");

//         Ensure default items exist before setting them
        if (!comboCategory.getItems().contains("Select Category")) {
            comboCategory.getItems().add(0, "Select Category");
        }
        comboCategory.setValue("Select Category");

        if (!comboStatus.getItems().contains("Select Status")) {
            comboStatus.getItems().add(0, "Select Status");
        }
        comboStatus.setValue("Select Status");

        if (!comboAuthor.getItems().contains("Select Author")) {
            comboAuthor.getItems().add(0, "Select Author");
        }
        comboAuthor.setValue("Select Author");
    }


    //    check value is a number or no ?-------------
    private Boolean checkIsNumber(String value) {
        if (value == null || value.trim().isEmpty()) {
            return false;
        }

        // Check if the value is only digits and greater than 0
        if (value.matches("\\d+")) {
            int num = Integer.parseInt(value);
            return num > 0;
        }

        // If it contains letters, symbols, or spaces, return false
        return false;
    }

    private void loadBookTable() {
        List<Book> bookList = service.getBookList();
        if (bookList == null) {
            Alert.trigger(AlertType.WARNING, "No available data in table now !");
            return;
        }

        colIsbn.setCellValueFactory(new PropertyValueFactory<>("isbn"));
        colTitle.setCellValueFactory(new PropertyValueFactory<>("title"));
        colAuthor.setCellValueFactory(new PropertyValueFactory<>("authorId"));
        colCategory.setCellValueFactory(new PropertyValueFactory<>("gerneId"));
        colCopies.setCellValueFactory(new PropertyValueFactory<>("copies"));
        colStatus.setCellValueFactory(new PropertyValueFactory<>("statusId"));

        ObservableList<Object> observableList = FXCollections.observableArrayList(bookList);
        bookTable.setItems(observableList);
    }

    public void clearOnActionBtn(ActionEvent actionEvent) {
        clearField();
    }

    public void loadTableOnActionBtn(ActionEvent actionEvent) {
        loadBookTable();
    }

    public void bookAdvanceSearchOnActionBtn(ActionEvent actionEvent) throws IOException {
        Stage stage = new Stage();
        stage.setScene(new Scene(FXMLLoader.load(getClass().getResource("/view/bookAdvanceSearchForm.fxml"))));
        stage.setTitle("Book Advance Search Form");
        stage.setResizable(false);
        stage.getIcons().add(new Image("/image/stageicon.png"));
        stage.show();
    }
}
